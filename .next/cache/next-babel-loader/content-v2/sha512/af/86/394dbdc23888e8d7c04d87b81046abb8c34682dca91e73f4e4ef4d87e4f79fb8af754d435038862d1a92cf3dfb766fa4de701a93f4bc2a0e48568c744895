{"ast":null,"code":"import cors from \"./cors\";\nimport { FactoryLogic } from \"e-commercee/ECommerce/dist/logic/FactoryLogic\";\nimport { Article } from \"e-commercee/ECommerce/dist/shared/entity/Article\";\nexport default async function (req, res) {\n  if (req.method === \"GET\") {\n    try {\n      await cors(req, res);\n      const {\n        pbarcode\n      } = req.query;\n      const getArticle = await FactoryLogic.getLArticle().getArticle(pbarcode);\n      return res.send(getArticle);\n    } catch (error) {\n      return res.status(500).send(\"Could not search article \" + error.message);\n    }\n  }\n\n  if (req.method === \"POST\") {\n    await cors(req, res);\n\n    try {\n      const data = req.body;\n      var dtproduct = new DTProduct(0, data.name, data.price);\n      const addproduct = await DataProduct.getInstance().addProduct(dtproduct);\n      return res.status(200).send(\"Success\");\n    } catch (error) {\n      return res.status(500).send(\"Could not add Product: \" + error.message);\n    }\n  }\n\n  if (req.method === \"PUT\") {\n    await cors(req, res);\n\n    try {\n      const data = req.body;\n      var dtproduct = new DTProduct(0, data.name, data.price);\n      const updprod = await DataProduct.getInstance().updateProduct(dtproduct);\n      return res.status(200).send(\"Success\");\n    } catch (error) {\n      return res.status(500).send(\"Could not UPDATE Product: \" + error.message);\n    }\n  }\n\n  if (req.method === \"DELETE\") {\n    await cors(req, res);\n    const data = req.body;\n\n    try {\n      var dtproduct = new DTProduct(0, data.name, 0);\n      const deletep = await DataProduct.getInstance().deleteProduct(dtproduct);\n      return res.status(200).send(\"Success\");\n    } catch (error) {\n      return res.status(500).send(\"Could not DELETE Product: \" + error.message);\n    }\n  }\n}","map":{"version":3,"sources":["D:/TODO (Desarrollo Software)/Tutoriales y demas cosas/APINext/APINextEcommercee/pages/api/article/article.js"],"names":["cors","FactoryLogic","Article","req","res","method","pbarcode","query","getArticle","getLArticle","send","error","status","message","data","body","dtproduct","DTProduct","name","price","addproduct","DataProduct","getInstance","addProduct","updprod","updateProduct","deletep","deleteProduct"],"mappings":"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","sourcesContent":[" import cors from \"./cors\";\r\n import { FactoryLogic } from \"e-commercee/ECommerce/dist/logic/FactoryLogic\";\r\n import { Article } from \"e-commercee/ECommerce/dist/shared/entity/Article\";\r\nexport default async function (req, res) {\r\n    if(req.method===\"GET\")\r\n    {\r\n        try\r\n        {\r\n     await cors(req, res)\r\n     const {pbarcode} = req.query;\r\n      const getArticle=await FactoryLogic.getLArticle().getArticle(pbarcode);\r\n      return res.send(getArticle);\r\n    }\r\n    catch (error) {\r\n      return res.status(500).send(\"Could not search article \"+error.message);\r\n    }\r\n    }\r\n    if(req.method===\"POST\")\r\n    {\r\n      await cors(req, res)\r\n      try\r\n      {\r\n      const data = req.body;\r\n      var dtproduct=new DTProduct(0, data.name,data.price);\r\n      \r\n      const addproduct=await DataProduct.getInstance().addProduct(dtproduct);\r\n      return res.status(200).send(\"Success\");   \r\n      }\r\n      catch (error) {\r\n        return res.status(500).send(\"Could not add Product: \"+error.message);    \r\n        \r\n      }\r\n    }\r\n     if(req.method===\"PUT\")\r\n        {\r\n        await cors(req, res)\r\n        try\r\n        {\r\n        const data = req.body;\r\n        var dtproduct=new DTProduct(0, data.name,data.price);\r\n        const updprod=await DataProduct.getInstance().updateProduct(dtproduct);\r\n        return res.status(200).send(\"Success\");   \r\n    }\r\n    catch (error) {\r\n      return res.status(500).send(\"Could not UPDATE Product: \"+error.message);    \r\n      \r\n    }   \r\n}\r\nif(req.method===\"DELETE\")\r\n{\r\n        await cors(req, res);\r\n        const data = req.body;\r\n        try\r\n        {\r\n\r\n        var dtproduct=new DTProduct(0, data.name,0);\r\n        const deletep=await DataProduct.getInstance().deleteProduct(dtproduct);\r\n        return res.status(200).send(\"Success\");   \r\n    }\r\n    catch (error) {\r\n    return res.status(500).send(\"Could not DELETE Product: \"+error.message);    \r\n    \r\n    }   \r\n}\r\n\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}